import java.nio.charset.StandardCharsets

/**
 * @author ngoanh2n@gmail.com (Ho Huu Ngoan)
 */

group group
version version

apply plugin: 'java'
apply plugin: 'idea'    // Optional using for IntelliJ IDEA
apply plugin: 'eclipse' // Optional using for Eclipse
apply plugin: 'io.qameta.allure'

/*
* Define extra properties for the project object - project.ext
*/
ext {
    encoding = StandardCharsets.UTF_8.name()
}

[compileJava, compileTestJava]*.sourceCompatibility = 1.8
[compileJava, compileTestJava]*.targetCompatibility = 1.8
[compileJava, compileTestJava]*.options.collect { options -> options.debug = true }
[compileJava, compileTestJava]*.options.collect { options -> options.encoding = encoding }

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    implementation('com.codeborne:selenide:5.6.1')
    implementation('io.qameta.allure:allure-gradle:2.8.1')
    implementation('io.qameta.allure:allure-selenide:2.13.1')

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.0')

    compileOnly('org.projectlombok:lombok:1.18.12')
    annotationProcessor('org.projectlombok:lombok:1.18.12')

    testCompileOnly('org.projectlombok:lombok:1.18.12')
    testAnnotationProcessor('org.projectlombok:lombok:1.18.12')
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}

task libsImplementation(type: Sync) {
    from configurations.compileClasspath
    from configurations.runtimeClasspath
    into 'libs/libs-implementation'
}

task libsTestImplementation(type: Sync) {
    from configurations.testCompileClasspath - configurations.compileClasspath
    from configurations.testRuntimeClasspath - configurations.runtimeClasspath
    into 'libs/libs-test-implementation'
}

task libsAnnotationProcessor(type: Sync) {
    from configurations.annotationProcessor + configurations.testAnnotationProcessor
    into 'libs/libs-annotation-processor'
}

task download(dependsOn: ['libsImplementation', 'libsTestImplementation', 'libsAnnotationProcessor'])